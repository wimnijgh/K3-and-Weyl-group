

Q := Rationals();
R<t>:=PolynomialRing(Q);
P3<x,y,z,w> := ProjectiveSpace(Q,3);
f1 := x^2-x*y+6*y^2;
f2 := z^2-z*w+6*w^2;
f3 := y*z-x*w;
L := Scheme(P3,[f1,f2,f3]);
LS := LinearSystem(P3,4);
LSC := LinearSystem(LS,L);
L2 := Scheme(P3,[y,w]);
L3 := Scheme(P3,[x,y]);

B := [];
B[1] := Sections(LinearSystem(LSC,L2));
B[2] := Sections(LinearSystem(LSC,L3));

F2 := GF(2);
P3p2 := ProjectiveSpace(F2,3);
repeat
  repeat
    f2 := &+[Random([-1,0,1])*b : b in B[1]];
    X := Scheme(P3p2,f2);
  until not IsSingular(X);
  list2:=[];
  Tr2:=[];
  for k in [1..9] do
    Fq := GF(2^k);
    P3q <xq,yq,zq,wq> := ProjectiveSpace(Fq,3);
    Xq := Scheme(P3q, f2);
    list2[k]:= #Points(Xq);
    Tr2[k] := list2[k] - 1 - 2^(2*k);
  end for;
  lwp2 := FrobeniusTracesToWeilPolynomials(Tr2, 2, 2, 22:
        KnownFactor := (t-2)^3);
  pwp2 := [wp : wp in lwp2 | CheckWeilPolynomial(wp,2,1:
        SurfDeg := 4)];
  if #pwp2 ge 2 then
    P3q <xq,yq,zq,wq> := ProjectiveSpace(GF(2^10),3);
    Xq := Scheme(P3q, f2);
    list2[10] := #Points(Xq);
    Tr2[10] := list2[10] - 1 - 2^20;
    lwp2 := FrobeniusTracesToWeilPolynomials(Tr2, 2, 2, 22:
        KnownFactor := (t-2)^3);
    pwp2 := [wp : wp in lwp2 | CheckWeilPolynomial(wp,2,1:
        SurfDeg := 4)];
  end if;
  wp2 := pwp2[1];
  bound2 := WeilPolynomialToRankBound(wp2,2);
until bound2 eq 4;


F3 := GF(3);
P3p3 := ProjectiveSpace(F3,3);
repeat
  repeat
    f3 := &+[Random([-1,0,1])*b : b in B[2]];
    X := Scheme(P3p3,f3);
  until not IsSingular(X);
  list3:=[];
  Tr3:=[];
  for k in [1..5] do
    Fq := GF(3^k);
    P3q <xq,yq,zq,wq> := ProjectiveSpace(Fq,3);
    Xq := Scheme(P3q, f3);
    list3[k] := #Points(Xq);
    Tr3[k] := list3[k] - 1 - 3^(2*k);
  end for;
  for k in [6..9] do
    Fq := GF(3^k);
    P3q <xq,yq,zq,wq> := ProjectiveSpace(Fq,3);
    Xq := Scheme(P3q, f3);
    P2<u,v,w> := ProjectiveSpace(Fq,2);
    Cubic := Scheme(P2,CoordinateRing(P2)!(Evaluate(h,[0,u,v,w])/v));
    if #IrreducibleComponents(Cubic) eq 1 then
      if Genus(Curve(Cubic)) eq 1 then
        EC := EllipticCurve(Curve(Cubic));
        count := #EC;
      else
        count := #Points(Cubic);
      end if;
    else
      count := #Points(Cubic);
    end if;

    for s in Fq do
      Cubic := Curve(P2,CoordinateRing(P2)!(Evaluate(h,[u,v,s*u,w])/u));
      if #IrreducibleComponents(Cubic) eq 1 then
        if Genus(Curve(Cubic)) eq 1 then
          EC := EllipticCurve(Curve(Cubic));
          count := count + #EC;
        else
          count := count + #Points(Cubic);
        end if;
      else
        count := count + #Points(Cubic);
      end if;
    end for;
    list3[k] := #Points(Xq);
    Tr3[k] := list3[k] - 1 - 3^(2*k);
  end for;
  lwp3 := FrobeniusTracesToWeilPolynomials(Tr3, 3, 2, 22:
        KnownFactor := (t-3)^3);
  pwp3 := [wp : wp in lwp3 | CheckWeilPolynomial(wp,3,1:
        SurfDeg := 4)];

  wp3 := pwp3[1];
  bound3 := WeilPolynomialToRankBound(wp3,3);
until bound3 eq 4;

h := 3*f2-2*f3;


f2;
f3;
h;

list2;
pwp2;
Bound2;
ArtinTateFormula(wp2,2,1);

list3;
pwp3;
Bound3;
ArtinTateFormula(wp3,3,1);

